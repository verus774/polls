function crudService($http,$q,config){var apiEndpoint=config.apiEndpoint+"/";return{getAll:function(collectionName,query){var deferred=$q.defer();return $http.get(apiEndpoint+collectionName,{params:query}).then(function(response){deferred.resolve(response.data.data)}).catch(function(response){deferred.reject(response)}),deferred.promise},get:function(collectionName,id){var deferred=$q.defer();return $http.get(apiEndpoint+collectionName+"/"+id).then(function(response){deferred.resolve(response.data.data)}).catch(function(response){deferred.reject(response)}),deferred.promise},add:function(collectionName,item){var deferred=$q.defer();return $http.post(apiEndpoint+collectionName,item).then(function(response){deferred.resolve(response.data.data)}).catch(function(response){deferred.reject(response)}),deferred.promise},remove:function(collectionName,id){var deferred=$q.defer();return $http.delete(apiEndpoint+collectionName+"/"+id).then(function(response){deferred.resolve(response.data.data)}).catch(function(response){deferred.reject(response)}),deferred.promise},update:function(collectionName,item){var deferred=$q.defer();return $http.put(apiEndpoint+collectionName+"/"+item._id,item).then(function(response){deferred.resolve(response.data.data)}).catch(function(response){deferred.reject(response)}),deferred.promise}}}function studentController(ioService,crudService,$state,roomsService){var vm=this;vm.currentRoom=roomsService.getCurrentRoom();ioService.on("startPoll",function(data){vm.activePoll=data}),ioService.on("stopPoll",function(){vm.activePoll=null}),vm.submitAnswers=function(){var answers={answers:[]};angular.forEach(vm.activePoll.questions,function(question){answers.answers.push({id:question._id,answer:question.answer})}),ioService.emit("answers",answers),answers=null,vm.activePoll=null,vm.message="Answers submitted"},vm.leaveRoom=function(){ioService.emit("leaveRoom",vm.currentRoom._id),$state.go("main")},function(){crudService.getAll("active-poll",{room:vm.currentRoom._id}).then(function(activePoll){vm.activePoll=activePoll}).catch(function(res){vm.activePoll=null,404===res.status?vm.message="No active poll":vm.message="Error"})}()}angular.module("pollsApp",["ui.router","angular-jwt","angular.filter","btford.socket-io","googlechart","angular-loading-bar","ui.bootstrap","ui-notification","pascalprecht.translate"]),angular.module("pollsApp").config(function($httpProvider,cfpLoadingBarProvider){cfpLoadingBarProvider.includeSpinner=!1,$httpProvider.interceptors.push("interceptorService")}),angular.module("pollsApp").config(function($translateProvider){$translateProvider.useStaticFilesLoader({prefix:"languages/locale-",suffix:".json"}),$translateProvider.preferredLanguage("ru_RU")}),angular.module("pollsApp").run(function($rootScope,authService,$state){$rootScope.$on("$stateChangeStart",function(event,toState){toState.data&&toState.data.restricted&&!authService.isLoggedIn()&&(event.preventDefault(),$state.go("login"))})}),function(){"use strict";function routes($stateProvider,$urlRouterProvider){$stateProvider.state("main",{url:"/",templateUrl:"../templates/main.html",controller:"mainController",controllerAs:"vm"}),$stateProvider.state("login",{url:"/login",templateUrl:"../templates/login.html",controller:"loginController",controllerAs:"vm"}),$stateProvider.state("signup",{url:"/signup",templateUrl:"../templates/signup.html",controller:"signupController",controllerAs:"vm"}),$stateProvider.state("profile",{url:"/profile",templateUrl:"../templates/profile.html",controller:"profileController",controllerAs:"vm",data:{restricted:!0}}),$stateProvider.state("categories",{url:"/categories",templateUrl:"../templates/categories.html",controller:"categoriesController",controllerAs:"vm",data:{restricted:!0}}),$stateProvider.state("polls",{url:"/polls",templateUrl:"../templates/polls.html",controller:"pollsController",controllerAs:"vm",data:{restricted:!0}}),$stateProvider.state("pollsDetail",{url:"/polls/:id",templateUrl:"../templates/pollsDetail.html",controller:"pollsDetailController",controllerAs:"vm",data:{restricted:!0}}),$stateProvider.state("results",{url:"/results",templateUrl:"../templates/results.html",controller:"resultsController",controllerAs:"vm",data:{restricted:!0}}),$stateProvider.state("resultsDetail",{url:"/results/:id",templateUrl:"../templates/resultsDetail.html",controller:"resultsDetailController",controllerAs:"vm",data:{restricted:!0}}),$stateProvider.state("users",{url:"/users",templateUrl:"../templates/users.html",controller:"usersController",controllerAs:"vm",data:{restricted:!0}}),$stateProvider.state("addUser",{url:"/add-user",templateUrl:"../templates/addUser.html",controller:"addUserController",controllerAs:"vm",data:{restricted:!0}}),$stateProvider.state("editUser",{url:"/edit-user/:id",templateUrl:"../templates/addUser.html",controller:"addUserController",controllerAs:"vm",data:{restricted:!0}}),$stateProvider.state("addPoll",{url:"/add-poll",templateUrl:"../templates/addPoll.html",controller:"addPollController",controllerAs:"vm",data:{restricted:!0}}),$stateProvider.state("editPoll",{url:"/edit-poll/:id",templateUrl:"../templates/addPoll.html",controller:"addPollController",controllerAs:"vm",data:{restricted:!0}}),$stateProvider.state("addCategory",{url:"/add-category",templateUrl:"../templates/addCategory.html",controller:"addCategoryController",controllerAs:"vm",data:{restricted:!0}}),$stateProvider.state("editCategory",{url:"/edit-category/:id",templateUrl:"../templates/addCategory.html",controller:"addCategoryController",controllerAs:"vm",data:{restricted:!0}}),$stateProvider.state("student",{url:"/student",templateUrl:"../templates/student.html",controller:"studentController",controllerAs:"vm"}),$urlRouterProvider.otherwise("/")}angular.module("pollsApp").config(routes),routes.$inject=["$stateProvider","$urlRouterProvider"]}(),angular.module("pollsApp").constant("config",{storageType:"localStorage",apiEndpoint:"api/v1",authEndpoint:"auth"}).constant("USER_ROLES",{admin:"admin",user:"user"}).constant("LOCALES",{locales:{ru_RU:"Русский",en_US:"English"},preferredLocale:"ru_RU"}),function(){"use strict";function startFromFilter(){return function(input,start){if(input&&input.length)return start=parseInt(start,10),input.slice(start)}}angular.module("pollsApp").filter("startFrom",startFromFilter)}(),function(){"use strict";function backButton($window){function link(scope,element,attrs){element.bind("click",function(){$window.history.back()})}return{link:link,restrict:"A"}}angular.module("pollsApp").directive("backButton",backButton),backButton.$inject=["$window"]}(),function(){"use strict";function storageService($window,config){var storageType=config.storageType,get=function(key){return $window[storageType].getItem(key)};return{set:function(key,value){$window[storageType].setItem(key,value)},get:get,remove:function(key){$window[storageType].removeItem(key)}}}angular.module("pollsApp").factory("storageService",storageService),storageService.$inject=["$window","config"]}(),function(){"use strict";function interceptorService(storageService){return{request:function(config){var token=storageService.get("access_token");return token&&(config.headers.Authorization=token),config}}}angular.module("pollsApp").factory("interceptorService",interceptorService),interceptorService.$inject=["storageService"]}(),function(){"use strict";function authService($http,$q,config,storageService,jwtHelper,USER_ROLES){var login=function(username,password){var deferred=$q.defer(),user={username:username,password:password};return $http.post(config.authEndpoint+"/login",user).then(function(response){var token=response.data.data.token;token?(storageService.set("access_token",token),deferred.resolve()):(storageService.remove("access_token"),deferred.reject("No access token in server response"))}).catch(function(response){storageService.remove("access_token"),deferred.reject(response)}),deferred.promise},logout=function(){storageService.remove("access_token")},isLoggedIn=function(){var token=storageService.get("access_token");return token&&!jwtHelper.isTokenExpired(token)};return{login:login,logout:logout,isLoggedIn:isLoggedIn,signup:function(username,name,password){var deferred=$q.defer(),user={username:username,name:name,password:password};return $http.post(config.authEndpoint+"/signup",user).then(function(response){var token=response.data.data.token;token?(storageService.set("access_token",token),deferred.resolve()):(storageService.remove("access_token"),deferred.reject("No access token in server response"))}).catch(function(response){storageService.remove("access_token"),deferred.reject(response)}),deferred.promise},getUser:function(){if(isLoggedIn()){var token=storageService.get("access_token");return jwtHelper.decodeToken(token)}},updateMe:function(user){var deferred=$q.defer();return $http.put(config.authEndpoint+"/me",user).then(function(response){var token=response.data.data.token;token?(storageService.set("access_token",token),deferred.resolve()):(storageService.remove("access_token"),deferred.reject("No access token in server response"))}).catch(function(response){deferred.reject(response)}),deferred.promise},isAdmin:function(){var token=storageService.get("access_token");return token&&!jwtHelper.isTokenExpired(token)&&jwtHelper.decodeToken(token).role===USER_ROLES.admin}}}angular.module("pollsApp").factory("authService",authService),authService.$inject=["$http","$q","config","storageService","jwtHelper","USER_ROLES"]}(),function(){"use strict";function roomsService(storageService){return{setCurrentRoom:function(room){storageService.set("currentRoom",JSON.stringify(room))},getCurrentRoom:function(){return JSON.parse(storageService.get("currentRoom"))}}}angular.module("pollsApp").factory("roomsService",roomsService),roomsService.$inject=["storageService"]}(),angular.module("pollsApp").factory("crudService",crudService),crudService.$inject=["$http","$q","config"],function(){"use strict";function pollsService(){return{getEmpty:function(){return angular.copy({title:"",category:"",questions:[{text:"",choices:["",""]}]})}}}angular.module("pollsApp").factory("pollsService",pollsService),pollsService.$inject=[]}(),function(){"use strict";function ioService(socketFactory){return socketFactory()}angular.module("pollsApp").factory("ioService",ioService),ioService.$inject=["socketFactory"]}(),function(){"use strict";function chartsService(){return{init:function(question){var chart={};return chart.type="PieChart",chart.options={title:question.text,legend:{position:"left"}},chart.data={cols:[{label:"Var",type:"string"},{label:"Count",type:"number"}],rows:[]},chart},clear:function(chartObj){chartObj.data.rows=[]},draw:function(chartObj,answerText,answerCount){chartObj.data.rows.push({c:[{v:answerText},{v:answerCount}]})}}}angular.module("pollsApp").factory("chartsService",chartsService),chartsService.$inject=[]}(),function(){"use strict";function modalService($uibModal){var modalDefaults={templateUrl:"../templates/modal.html",controllerAs:"vm"};return{show:function(modalOptions){modalDefaults.controller=function($uibModalInstance){var vm=this;vm.modalOptions=modalOptions,vm.modalOptions.ok=function(){$uibModalInstance.close()},vm.modalOptions.close=function(){$uibModalInstance.dismiss()}};var tempModalOptions={};return angular.extend(tempModalOptions,modalDefaults,modalOptions),$uibModal.open(tempModalOptions).result}}}angular.module("pollsApp").factory("modalService",modalService),modalService.$inject=["$uibModal"]}(),function(){"use strict";function navigationController($state,authService){var vm=this;vm.authService=authService,vm.logout=function(){authService.logout(),$state.go("main")}}angular.module("pollsApp").controller("navigationController",navigationController),navigationController.$inject=["$state","authService"]}(),function(){"use strict";function mainController(crudService,roomsService,ioService,startFromFilter){var vm=this;vm.currentPage=1,vm.pageSize=10;vm.joinRoom=function(id,name){ioService.emit("joinRoom",id),roomsService.setCurrentRoom({_id:id,name:name})},function(){crudService.getAll("rooms").then(function(rooms){vm.rooms=rooms}).catch(function(res){vm.rooms=null,404===res.status?vm.message="No rooms":vm.message="Error"})}()}angular.module("pollsApp").controller("mainController",mainController),mainController.$inject=["crudService","roomsService","ioService","startFromFilter"]}(),function(){"use strict";function loginController($state,authService,Notification){var vm=this;vm.login=function(){authService.login(vm.username,vm.password).then(function(){$state.go("polls")}).catch(function(){Notification.error("Authorization fail"),$state.reload()})}}angular.module("pollsApp").controller("loginController",loginController),loginController.$inject=["$state","authService","Notification"]}(),function(){"use strict";function profileController(authService,$state,Notification){var vm=this;vm.user=authService.getUser(),vm.orig=angular.copy(vm.user),vm.resetForm=function(){vm.user=angular.copy(vm.orig),vm.profileForm.$setPristine()},vm.updateUser=function(){vm.user&&authService.updateMe(vm.user).then(function(){Notification.success("Profile updated"),$state.reload()}).catch(function(){Notification.error("Fail")})}}angular.module("pollsApp").controller("profileController",profileController),profileController.$inject=["authService","$state","Notification"]}(),function(){"use strict";function signupController($state,authService,Notification){var vm=this;vm.signup=function(){authService.signup(vm.username,vm.name,vm.password).then(function(){$state.go("polls")}).catch(function(){Notification.error("Signup fail"),$state.reload()})}}angular.module("pollsApp").controller("signupController",signupController),signupController.$inject=["$state","authService","Notification"]}(),function(){"use strict";function categoriesController(crudService,modalService,Notification,$window,startFromFilter){var vm=this;vm.currentPage=1,vm.pageSize=10;var loadCategories=function(){crudService.getAll("categories").then(function(categories){vm.categories=categories}).catch(function(res){vm.categories=null,404===res.status?vm.message="No categories":vm.message="Error"})};vm.removeCategory=function(id){var modalOptions={closeButtonText:"Cancel",actionButtonText:"Delete",headerText:"Delete category?",bodyText:"Are you sure you want to delete this category?"};modalService.show(modalOptions).then(function(){crudService.remove("categories",id).then(function(){Notification.success("Category deleted"),loadCategories()}).catch(function(){Notification.error("Fail")}),$window.scrollTo(0,0)})},loadCategories()}angular.module("pollsApp").controller("categoriesController",categoriesController),categoriesController.$inject=["crudService","modalService","Notification","$window","startFromFilter"]}(),function(){"use strict";function addCategoryController(crudService,$stateParams,$window,$state,Notification){var vm=this;vm.category={};vm.saveCategory=function(id){vm.category&&(id?crudService.update("categories",vm.category).then(function(){Notification.success("Category updated"),$state.go("categories")}).catch(function(){$window.scrollTo(0,0),Notification.error("Fail")}):crudService.add("categories",vm.category).then(function(){Notification.success("Category added"),$state.go("categories")}).catch(function(){$window.scrollTo(0,0),Notification.error("Fail")}))},vm.resetForm=function(){vm.category._id?vm.category=angular.copy(vm.orig):vm.category={},vm.addCategoryForm.$setPristine()},$stateParams.id&&function(id){crudService.get("categories",id).then(function(category){vm.category=category,vm.orig=angular.copy(vm.category)}).catch(function(res){vm.category=null,404===res.status?vm.message="No such category":vm.message="Error"})}($stateParams.id)}angular.module("pollsApp").controller("addCategoryController",addCategoryController),addCategoryController.$inject=["crudService","$stateParams","$window","$state","Notification"]}(),function(){"use strict";function pollsController(storageService,authService,crudService,ioService,$filter,chartsService,$window,modalService,Notification,startFromFilter){function loadPolls(){crudService.getAll("polls").then(function(polls){angular.forEach(polls,function(poll){vm.categories.push(poll.category)}),vm.polls=polls,vm.activePoll=$filter("filter")(polls,{active:!0})[0],vm.activePoll&&initCharts(vm.activePoll.questions)}).catch(function(res){vm.polls=null,404===res.status?vm.message="No polls":vm.message="Error"})}function groupAnswers(answers){var groupedAnswers=[];return angular.forEach($filter("groupBy")(answers,"id"),function(value,key){angular.forEach($filter("countBy")(value,"answer"),function(value2,key2){groupedAnswers.push({question:key,answer:key2,count:value2})})}),groupedAnswers}function initCharts(questions){angular.forEach(questions,function(question){var chart=chartPrefix+question._id;vm[chart]=chartsService.init(question)})}function clearCharts(questions){angular.forEach(questions,function(question){chartsService.clear(vm[chartPrefix+question._id])})}function fillCharts(answers){vm.results=[],angular.forEach(answers,function(answer){var answerText,questionText,questionId,chart=chartPrefix+answer.question;angular.forEach(vm.activePoll.questions,function(question){answer.question===question._id&&(answerText=question.choices[answer.answer],questionText=question.text,questionId=question._id)}),vm.results.push({questionId:questionId,questionText:questionText,answer:answerText,count:answer.count}),chartsService.draw(vm[chart],answerText,answer.count)})}var vm=this;vm.currentPage=1,vm.pageSize=10,vm.answers=[],vm.categories=[];var chartPrefix="chart_";ioService.emit("joinRoom",authService.getUser()._id),loadPolls(),vm.removePoll=function(id){var modalOptions={closeButtonText:"Cancel",actionButtonText:"Delete",headerText:"Delete poll?",bodyText:"Are you sure you want to delete this poll and the related results?"};modalService.show(modalOptions).then(function(){crudService.remove("polls",id).then(function(){Notification.success("Poll deleted"),loadPolls()}).catch(function(){Notification.error("Fail")}),$window.scrollTo(0,0)})},vm.startPoll=function(id){var token=storageService.get("access_token");token&&ioService.emit("startPoll",{access_token:token,id:id})},vm.stopPoll=function(id){var token=storageService.get("access_token");token&&ioService.emit("stopPoll",{access_token:token,id:id})},vm.saveResults=function(){var modalOptions={closeButtonText:"Cancel",actionButtonText:"Save result",headerText:"Save result?",bodyText:"Are you sure you want to stop poll and save result?"},result={poll:vm.activePoll._id,title:vm.activePoll.title,results:vm.results};modalService.show(modalOptions).then(function(){crudService.add("results",result).then(function(){vm.stopPoll(vm.activePoll._id),Notification.success("Result added")}).catch(function(){Notification.error("Fail")}),$window.scrollTo(0,0)})},ioService.on("answers",function(data){angular.forEach(data.answers,function(value){vm.answers.push(value)}),clearCharts(vm.activePoll.questions),fillCharts(groupAnswers(vm.answers))}),ioService.on("startPoll",function(data){vm.activePoll=data,vm.activePoll&&initCharts(vm.activePoll.questions),angular.forEach(vm.polls,function(poll){vm.activePoll._id==poll._id&&(poll.active=!0)})}),ioService.on("stopPoll",function(data){angular.forEach(vm.polls,function(poll){data._id==poll._id&&(poll.active=!1)}),vm.activePoll=null}),ioService.on("error",function(data){Notification.error("Error: "+data.message)})}angular.module("pollsApp").controller("pollsController",pollsController),pollsController.$inject=["storageService","authService","crudService","ioService","$filter","chartsService","$window","modalService","Notification","startFromFilter"]}(),function(){"use strict";function pollsDetailController(crudService,$stateParams){var vm=this;crudService.get("polls",$stateParams.id).then(function(poll){vm.poll=poll}).catch(function(res){vm.poll=null,404===res.status?vm.message="No such poll":vm.message="Error"})}angular.module("pollsApp").controller("pollsDetailController",pollsDetailController),pollsDetailController.$inject=["crudService","$stateParams"]}(),function(){"use strict";function resultsController(crudService,modalService,Notification,$window,startFromFilter){var vm=this;vm.currentPage=1,vm.pageSize=10;var loadResults=function(){crudService.getAll("results").then(function(results){vm.results=results}).catch(function(res){vm.results=null,404===res.status?vm.message="No results":vm.message="Error"})};vm.removeResult=function(id){var modalOptions={closeButtonText:"Cancel",actionButtonText:"Delete",headerText:"Delete result?",bodyText:"Are you sure you want to delete this result?"};modalService.show(modalOptions).then(function(){crudService.remove("results",id).then(function(){Notification.success("Result deleted"),loadResults()}).catch(function(){Notification.error("Fail")}),$window.scrollTo(0,0)})},loadResults()}angular.module("pollsApp").controller("resultsController",resultsController),resultsController.$inject=["crudService","modalService","Notification","$window","startFromFilter"]}(),function(){"use strict";function resultsDetailController(crudService,$stateParams,$filter){function initCharts(results){angular.forEach($filter("groupBy")(results,"questionId"),function(value,key){var chart=chartPrefix+key;vm[chart]={},vm[chart].type="PieChart",vm[chart].data={cols:[{label:"Var",type:"string"},{label:"Count",type:"number"}],rows:[]},angular.forEach(vm.result.results,function(res){res.questionId==key&&(vm[chart].options={title:res.questionText,legend:{position:"left"}},vm[chart].data.rows.push({c:[{v:res.answer},{v:res.count}]}))})})}var vm=this,chartPrefix="chart_";$stateParams.id&&function(id){crudService.get("results",id).then(function(result){vm.result=result,initCharts(vm.result.results)}).catch(function(res){vm.result=null,404===res.status?vm.message="No such result":vm.message="Error"})}($stateParams.id)}angular.module("pollsApp").controller("resultsDetailController",resultsDetailController),resultsDetailController.$inject=["crudService","$stateParams","$filter"]}(),function(){"use strict";function addPollController(pollsService,$stateParams,$window,$state,Notification,crudService){var vm=this;vm.poll=pollsService.getEmpty();vm.closeAlert=function(){vm.alert=null},vm.savePoll=function(id){vm.poll&&(id?crudService.update("polls",vm.poll).then(function(){Notification.success("Poll updated"),$state.go("polls")}).catch(function(){$window.scrollTo(0,0),Notification.error("Fail")}):crudService.add("polls",vm.poll).then(function(){Notification.success("Poll added"),$state.go("polls")}).catch(function(){$window.scrollTo(0,0),Notification.error("Fail")}))},vm.addQuestion=function(){vm.poll.questions.push({text:"",choices:["",""]}),vm.addPollForm.$setDirty()},vm.removeQuestion=function(questionIndex){vm.poll.questions.splice(questionIndex,1),vm.addPollForm.$setDirty()},vm.removeChoice=function(questionIndex,choiceIndex){vm.poll.questions[questionIndex].choices.splice(choiceIndex,1),vm.addPollForm.$setDirty()},vm.addChoice=function(index){vm.poll.questions[index].choices.push(""),vm.addPollForm.$setDirty()},vm.resetForm=function(){vm.poll._id?(vm.poll=angular.copy(vm.orig),vm.addPollForm.$setPristine()):(vm.poll=pollsService.getEmpty(),vm.addPollForm.$setPristine())},function(){crudService.getAll("categories").then(function(categories){vm.categories=categories,vm.poll.category=vm.categories[0]}).catch(function(){vm.categories=null})}(),$stateParams.id&&function(id){crudService.get("polls",id).then(function(poll){vm.poll=poll,vm.orig=angular.copy(vm.poll)}).catch(function(res){vm.poll=null,404===res.status?vm.message="No such poll":vm.message="Error"})}($stateParams.id)}angular.module("pollsApp").controller("addPollController",addPollController),addPollController.$inject=["pollsService","$stateParams","$window","$state","Notification","crudService"]}(),angular.module("pollsApp").controller("studentController",studentController),studentController.$inject=["ioService","crudService","$state","roomsService"],function(){"use strict";function usersController(crudService,modalService,Notification,$window,$state,startFromFilter){var vm=this;vm.currentPage=1,vm.pageSize=10;var loadUsers=function(){crudService.getAll("users").then(function(users){vm.users=users}).catch(function(res){vm.users=null,403===res.status?$state.go("polls"):vm.message="Error"})};vm.removeUser=function(id){var modalOptions={closeButtonText:"Cancel",actionButtonText:"Delete",headerText:"Delete user?",bodyText:"Are you sure you want to delete this user and the related objects?"};modalService.show(modalOptions).then(function(){crudService.remove("users",id).then(function(){Notification.success("User deleted"),loadUsers()}).catch(function(){Notification.error("Fail")}),$window.scrollTo(0,0)})},loadUsers()}angular.module("pollsApp").controller("usersController",usersController),usersController.$inject=["crudService","modalService","Notification","$window","$state","startFromFilter"]}(),function(){"use strict";function addUserController(crudService,$state,$window,USER_ROLES,$stateParams,Notification){var vm=this;vm.user={},vm.USER_ROLES=USER_ROLES;vm.saveUser=function(id){id?crudService.update("users",vm.user).then(function(){Notification.success("User updated"),$state.go("users")}).catch(function(){$window.scrollTo(0,0),Notification.error("Fail")}):crudService.add("users",vm.user).then(function(){Notification.success("User added"),$state.go("users")}).catch(function(){$window.scrollTo(0,0),Notification.error("Fail")})},vm.resetForm=function(){vm.user._id?(vm.user=angular.copy(vm.orig),vm.addUserForm.$setPristine()):(vm.user={},vm.addUserForm.$setPristine())},$stateParams.id&&function(id){crudService.get("users",id).then(function(user){vm.user=user,vm.orig=angular.copy(vm.user)}).catch(function(res){vm.user=null,404===res.status?vm.message="No such user":vm.message="Error"})}($stateParams.id)}angular.module("pollsApp").controller("addUserController",addUserController),addUserController.$inject=["crudService","$state","$window","USER_ROLES","$stateParams","Notification"]}();